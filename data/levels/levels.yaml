LevelNot: &LevelNot
  tag: p
  content: "Turn the output (on the right) green when the input (on the left) is blue and blue when the input is green."

LevelCrossing: &LevelCrossing
  tag: p
  content: "Propagate the top input to the bottom output and the bottom input to the top output."

LevelAnd: &LevelAnd
  tag: p
  content: "Given two inputs, output blue if they are both blue and green otherwise."

LevelDelay: &LevelDelay
  tag: p
  content: "Output blue on the first step. For all other steps, output the color of the previous input."

LevelSwitch: &LevelSwitch
  tag: p
  content: "Switch the output between blue and red whenever the input is blue. The output should start as blue (unless the first input is blue)."

LevelXor: &LevelXor
  tag: p
  content: "Given two inputs, output green if they are the same or blue if they are different."

LevelRam: &LevelRam
  tag: p
  content: "You have a blue/green input and a red/orange input. You should output the color of the top input the previous time the bottom input was that color. The first time red is input and the first time orange is input, you should output blue."

LevelMod: &LevelMod
  - tag: p
    content: "The wheel starts with the blue circle activated. The wheel turns clockwise on a blue input and counterclockwise on a green input. Output the new active color."
  - tag: div
    className: center
    children:
      - tag: Svg
        value: Wheel

LevelRainbow: &LevelRainbow
  tag: p
  content: "No inputs. Output red, orange, yellow, green, blue, and purple in order and repeat."

LevelMedian: &LevelMedian
  tag: p
  content: "Given one sequential input, output the majority of the past 3 inputs. The first 3 inputs will be blue."

LevelVending: &LevelVending
  tag: p
  content: "You are running the display for vending machine. The input is blue when a user tries to insert a coin and green when trying to remove one. The output should indicate the number of coins: green for 0, blue for 1, and orange for 2. If a user attempts to remove a coin when there are 0 or add one when there are already 2, the count does not change and you should output a red warning light."

LevelAdder: &LevelAdder
  tag: p
  content: "Given two sequential inputs, let green represent a 0 bit and blue represent a 1 bit. The inputs are given from low bit to high bit. Output the corresponding color for the addition of these numbers in base 2."

LevelBattle: &LevelBattle
  tag: p
  content: "Simulate the status of a game with a blue player using the top input and a green player using the bottom input. The game starts neutral (white). A player fires their gun by inputting red. If exactly one player fires, the state moves one step in the direction of that player (green, white, blue) or stays the same if already the color of that player. If neither fires, nothing changes. If both players fire, they both lose and you should output purple and reset the state to neutral."

LevelStack: &LevelStack
  tag: p
  content: "Given two sequential inputs, push the upper color onto a stack if the lower color is green, and pop from the stack to the output if the lower color is blue. When pushing onto the stack, output the color pushed. The inputs are guaranteed such that the stack never grows beyond 3 elements."

IntroNot: &IntroNot
  # <div className="modal-title">SpaceCells</div>
  - tag: p
    content: "Welcome to SpaceCells, the satellite planet where engineers design systems that control colors at the level of electrons. The basic building block is the cell, a component with four cavities which holds two electrons."
  - tag: div
    className: row-line
    children:
      - tag: Svg
        value: XCell
  - tag: p
    content: "By placing them in different configurations, we can make them do anything we set our minds to!"
  - tag: div
    className: gridlines
    style:
      display: grid
      gridTemplateColumns: repeat(6, min-content)
    children:
      # row 1
      - tag: Svg
        value: XCell
        className: latched resolved-1
      - tag: Svg
        value: XCell
        className: resolved-1
      - tag: Svg
        value: XCell
        className: resolved-1
      - tag: Svg
        value: XCell
        className: resolved-1
      - tag: Svg
        value: XCell
        className: resolved-1
      - tag: Svg
        value: XCell
        className: resolved-1
        # row 2
      - tag: div
        className: untrespassable
      - tag: div
      - tag: div
      - tag: Svg
        value: XCell
        className: resolved-1
      - tag: div
      - tag: div
        # row 3
      - tag: div
        className: untrespassable
      - tag: Svg
        value: XCell
        className: resolved-1
      - tag: div
      - tag: div
      - tag: Svg
        value: XCell
        className: resolved-0
      - tag: Svg
        value: XCell
        className: resolved-0
  - tag: p
    children:
      - tag: Svg
        value: XCell
        className: inline latched resolved-1
      - tag: span
        content: " is a locked cell, meaning it is fixed. Other "
      - tag: Svg
        value: XCell
        className: inline resolved-1
      - tag: Svg
        value: XCell
        className: inline resolved-0
      - tag: span
        content: " cells are free to change."
  - tag: p
    content: "Cells are too small for human hands, so we manipulate them using bots. In later assignments you will need to give bots instructions."
  - tag: div
    className: "row-line"
    children:
      - tag: Svg
        value: CellBot
        className: bot0
      - tag: Svg
        value: Start
        className: bot0
      - tag: Svg
        value: DirectionRight
        className: bot0
      - tag: Svg
        value: Next
        className: bot0
      - tag: Svg
        value: DirectionLeft
        className: bot0

IntroCrossing: &IntroCrossing
  - tag: div
    className: note
    children:
      - tag: p
        content: "Criss cross applesauce... Oh those childhood days."
      - tag: p
        style:
          textAlign: right
        content: "~Zach"

IntroAnd: &IntroAnd
  - tag: p
    children:
      - tag: span
        content: "You will be placing your own instructions from now on. Check the "
      - tag: em
        content: Instructions
      - tag: span
        content: " tabs."
  # - tag: p
    # content: "Cells are too small for human hands, so we manipulate them using bots. Bots move and perform all sorts of operations based on instructions we assign. The only ones you need as we start off are the direction instructions, the START instruction, and the NEXT instruction. There is a single START instruction and it is where the bot starts its operation. The NEXT instruction will cause your output to be verified and will advance the input(s) and output(s)."
  - tag: div
    className: "row-line"
    children:
      - tag: Svg
        value: Start
        className: bot0
      - tag: Svg
        value: Next
        className: bot0
      - tag: Svg
        value: DirectionLeft
        className: bot0
      - tag: Svg
        value: DirectionDown
        className: bot0
      - tag: Svg
        value: DirectionUp
        className: bot0
      - tag: Svg
        value: DirectionRight
        className: bot0
  # - tag: p
    # children:
      # - tag: span
        # content: "You can check out the "
      # - tag: Manual
      # - tag: span
        # content: " for a complete description of cells and instructions."
  - tag: div
    className: note
    children:
      - tag: p
        content: "I have found a truly marvelous demonstration of this configuration, which this note is too small to contain."
      - tag: div
        className: gridlines
        style:
          display: grid
          gridTemplateColumns: "repeat(5, min-content)"
        children: [
          {"tag": "div"}, {"tag": "div"}, {"tag": "Svg", "value": "DiodeDown"}, {"tag": "div"}, {"tag": "div"},
          {"tag": "div"}, {"tag": "div"}, {"tag": "div"}, {"tag": "div"},
          {"tag": "Svg", "value": "DiodeRight"}, {"tag": "Svg", "value": "XCell"}, {"tag": "Svg", "value": "XCell"}, {"tag": "Svg", "value": "XCell"},
          {"tag": "div"}, {"tag": "div"}, {"tag": "Svg", "value": "DiodeUp"}, {"tag": "div"}, {"tag": "div"},
          {"tag": "div"}, {"tag": "div"}, {"tag": "div"}, {"tag": "div"},
        ]

IntroDelay: &IntroDelay
  - tag: p
    children:
      - tag: span
        content: "Most instructions are now available. Check the "
      - tag: Manual
      - tag: span
        content: " for descriptions."
  - tag: div
    className: note
    children:
      - tag: p
        content: "Cells innately have no memories, but bots never forget a thing."
      - tag: p
        content: "You may find some or all of the GRAB/DROP, LOCK/FREE, and RESET instructions varieties useful."
      - tag: div
        className: "row-line"
        children:
          - tag: Svg
            value: Swap
            className: bot0
          - tag: Svg
            value: ToggleLatch
            className: bot0
          - tag: Svg
            value: Relatch
            className: bot0

IntroSwitch: &IntroSwitch
  - tag: p
    content: "Congrats on completing the beginning assignments! From here on, completed assignments will unlock new ones. All cell types and instructions are available for use."
  - tag: div
    className: note
    children:
      - tag: p
        content: "You can use the POWER instructions to toggle the power to the outputs."
      - tag: div
        className: "row-line"
        children:
          - tag: Svg
            value: Power0
            className: bot0
          - tag: Svg
            value: Power0
            className: bot1
          - tag: Svg
            value: Power1
            className: bot0
          - tag: Svg
            value: Power1
            className: bot1
      - tag: p
        content: "Only powered outputs emit light. Both outputs start powered."

IntroXor: &IntroXor
  - tag: div
    className: note
    children:
      - tag: p
        content: "Green and blue, grue and bleen..."

IntroRam: &IntroRam
  - tag: div
    className: note
    children:
      - tag: p
        content: "Remember, forget, rinse, repeat. The mind is limited but the possibilities are endless."

Epilogue: &Epilogue
  - tag: h2
    content: Epilogue
  - tag: div
    className: note
    children:
      - tag: p
        content: "This is a final farewell. I am leaving in search of crystalized lattices which will allow for lightspeed computations. I have included a diagram here for you. With these at the table, we will have a key element towards advancing to the next age of innovation."
      - tag: Svg
        value: CleanCrystalTile

levels: &levels
  - name: not
    title: Inversion
    goal: *LevelNot
    preface: *IntroNot
  - name: crossing
    title: "X Crossing"
    goal: *LevelCrossing
    preface: *IntroCrossing
  - name: and
    title: Unity
    goal: *LevelAnd
    preface: *IntroAnd
  - name: delay
    title: Memories
    goal: *LevelDelay
    preface: *IntroDelay
  - name: switch
    title: "Power It Up"
    goal: *LevelSwitch
    preface: *IntroSwitch
  - name: xor
    title: Differences
    goal: *LevelXor
    preface: *IntroXor
  - name: ram
    title: "Storage Unit"
    goal: *LevelRam
    preface: *IntroRam
  - name: mod
    title: "Wheel of Fortune"
    goal: *LevelMod
  - name: rainbow
    title: "Colors of the Rainbow"
    goal: *LevelRainbow
  - name: median
    title: "Median Filter"
    goal: *LevelMedian
  - name: vending
    title: "Vending Machine"
    goal: *LevelVending
  - name: adder
    title: "Quick Maths"
    goal: *LevelAdder
  # - name: battle
    # title: Fight
    # goal: *LevelBattle
  # - name: stack
    # title: "Stacks on Stacks"
    # goal: *LevelStack
  - name: epilogue
    title: Epilogue
    preface: *Epilogue
